// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YouTubester.Persistence;

#nullable disable

namespace YouTubester.Persistence.Migrations
{
    [DbContext(typeof(YouTubesterDb))]
    [Migration("20251018113709_Channels")]
    partial class Channels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("YouTubester.Domain.Channel", b =>
                {
                    b.Property<string>("ChannelId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UploadsPlaylistId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ChannelId");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("YouTubester.Domain.Reply", b =>
                {
                    b.Property<string>("CommentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ApprovedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FinalText")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PostedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PulledAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("SuggestedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("SuggestedText")
                        .HasColumnType("TEXT");

                    b.Property<string>("VideoId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VideoTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CommentId");

                    b.HasIndex("VideoId");

                    b.ToTable("Replies");
                });

            modelBuilder.Entity("YouTubester.Domain.Video", b =>
                {
                    b.Property<string>("UploadPlaylistId")
                        .HasColumnType("TEXT");

                    b.Property<string>("VideoId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CachedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultAudioLanguage")
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultLanguage")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationDescription")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("PublishedAt")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Tags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Visibility")
                        .HasColumnType("INTEGER");

                    b.HasKey("UploadPlaylistId", "VideoId");

                    b.HasIndex("UpdatedAt");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("YouTubester.Domain.Video", b =>
                {
                    b.OwnsOne("YouTubester.Domain.GeoLocation", "Location", b1 =>
                        {
                            b1.Property<string>("VideoUploadPlaylistId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("VideoId")
                                .HasColumnType("TEXT");

                            b1.Property<double>("Latitude")
                                .HasColumnType("REAL");

                            b1.Property<double>("Longitude")
                                .HasColumnType("REAL");

                            b1.HasKey("VideoUploadPlaylistId", "VideoId");

                            b1.ToTable("Videos");

                            b1.WithOwner()
                                .HasForeignKey("VideoUploadPlaylistId", "VideoId");
                        });

                    b.Navigation("Location");
                });
#pragma warning restore 612, 618
        }
    }
}
